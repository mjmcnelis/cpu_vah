lattice_points_x 	= 301
lattice_points_y	= 301
lattice_points_eta	= 1
lattice_spacing_x 	= 0.1
lattice_spacing_y 	= 0.1
lattice_spacing_eta = 0.1
resolve_nucleons    = 1
training_grid		= 1
train_coarse_factor	= 1
auto_grid			= 0
sigma_factor		= 2.0
buffer				= 1.0
max_time_steps 		= 2000
output_interval 	= 0.5
fixed_time_step 	= 0.0125
adaptive_time_step 	= 1
delta_0				= 0.004
alpha				= 0.5
tau_coarse_factor   = 2
#
# Note: if parameter is an int or double type, value needs
#       to be an integer or decimal point (e.g. 1 or 1.0)
#
# lattice_points 		number of grid points along (x,y,n)		(int)
#						- grid size > fireball
#						- reconfigured if use GRID_REGRESSION
#
# lattice_spacing 		uniform grid spacing along (x,y,n)		(double)
#						- should be fine enough to resolve
#						  spatial features (e.g. nucleon width)
#
# resolve_nucleons      option to readjust lattice spacing      (int)
#                       to resolve nucleon width while
#						maintaining the same grid size
#						- dx = dy = dn = w / 5
#
# training_grid			option to readjust grid length to 30 fm	(int)
#						- used in training / benchmarking
#						  the regression model
#
# train_coarse_factor   scale lattice spacing by const factor   (double)
#						- 2 preferred for faster training
#						- 1 for benchmarking auto_grid to training_grid
#
# auto_grid             option to use trained regression model  (int)
#						to automate the grid size
#						- need to train regression model, define
#						  RANDOM_MODEL_PARAMETERS and use parameter samples
#
# sigma_factor			number of stds to add to mean fireball  (double)
#						radius if use auto_grid
#						- e.g (2.0 sigma)
#
# buffer				additional increase of grid size 		(double)
#						if use auto_grid
#						- buffer > 0 (1 - 2 fm is sufficient)
#
# max_time_steps 		max number of time steps 				(int)
# output_interval		time interval between hydro outputs		(double)
# fixed_time_step       time step for fixed iterations			(double)
#						- dt_fix <= dt_CFL_min required
#						- dt_CFL_min = min(dx, dy, dn) / 8
#
# adaptive_time_step 	option to use adaptive iterations		(int)
#						0 = fixed time step
#						1 = adaptive time step <= min(dx/ax, dy/ay, dn/an) / 8
#						2 = adaptive time step <= fixed_time_step (only mode compatible w freezout finder)
#
# delta_0				adaptive tolerance parameter			(double)
# alpha					adaptive control parameter				(double)
#						- (0 < alpha < 1)
#
# tau_coarse_factor     coarse graining of freezeout surface wpt tau (int)
#						- tau_coarse_factor > 1
#