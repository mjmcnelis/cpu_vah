lattice_points_x     = 281
lattice_points_y     = 281
lattice_points_eta   = 1
lattice_spacing_x    = 0.1
lattice_spacing_y    = 0.1
lattice_spacing_eta  = 0.1
resolve_nucleons     = 1
fit_rapidity_plateau = 0
training_grid        = 0
train_coarse_factor  = 1
auto_grid            = 0
sigma_factor         = 0.0
buffer               = 2.5
max_time_steps       = 2000
output_interval      = 0.5
fixed_time_step      = 0.0125
adaptive_time_step   = 1
delta_0              = 0.004
alpha                = 0.5
tau_coarse_factor    = 2
#
# note: if parameter is int or float type, assigned value needs to match that type (e.g. 1 or 1.0)
#
# lattice_points_x                custom grid points Nx (int)
#                                 note: length Lx = (Nx - 1).dx
#
# lattice_points_y                custom grid points Ny (int)
#                                 note: length Ly = (Ny - 1).dy
#
# lattice_points_eta              custom grid points Neta (int)
#                                 note: length Leta = (Neta - 1).deta
#                                 note: Neta set to 1 if BOOST_INVARIANT defined
#
# lattice_spacing_x               custom lattice spacing dx (float)
#
# lattice_spacing_y               custom lattice spacing dy (float)
#
# lattice_spacing_eta             custom lattice spacing deta (float)
#
# resolve_nucleons                switch to resolve nucleon width (int)
#    0 = use custom dx, dy
#    1 = set dx, dy to trento_nucleon_width / 5 (and adjust Nx, Ny to keep custom Lx, Ly)
#
# fit_rapidity_plateau            switch for eta plateau extension (int)
#    0 = use custom deta, Neta
#    1 = set deta to sigma_eta / 5 and adjust Neta so that Leta = rapidity_flat + 10.sigma_eta
#
# training_grid                   switch to use training grid (int)
#                                 note: only activated if read in random model parameters
#    0 = use custom Nx, Ny
#    1 = adjust Nx, Ny so that Lx = Ly = 30 fm (after applying resolve_nucleons and train_coarse_factor)
#
# train_coarse_factor             further coarse-grain dx, dy (training grid only) (float)
#                                 note: use 2 for faster training, 1 for benchmarking fixed vs. auto runtimes
#
# auto_grid                       switch to use auto grid (int)
#                                 note: need to launch regression model and turn off training_grid
#                                 note: only activated if read in random model parameters
#    0 = use custom Nx, Ny
#    1 = adjust Nx, Ny so that Lx = Ly = Lauto (after applying resolve_nucleons)
#
# sigma_factor                    number of fireball radius standard deviations to add to Lauto (float)
#
# buffer                          constant margin to add to Lauto (float)
#
# max_time_steps                  max number of time steps (int)
#                                 note: simulation fails if exceeds this many iterations
#
# output_interval                 regular time interval between hydrodynamic evolution outputs (float)
#                                 note: for run_hydro = 1 only
#                                 note: interval doubled after 3 file outputs
#                                 note: only Bjorken evolution outputs at every time step
#
# fixed_time_step                 value for dt = constant (float)
#                                 note: fixed_time_step <= min(dx, dy, deta) / 8
#
# adaptive_time_step              switch to use adaptive time step (int)
#    0 = dt is constant 
#    1 = dt is adaptive (recommended)
#
# delta_0                         error tolerance parameter (float)
#
# alpha                           safety control parameter (float)
#                                 note: 0 < alpha < 1
#
# tau_coarse_factor               freezeout finder call period (int)
#                                 note: coarse-grains temporal resolution of freezeout surface
#
#
#
