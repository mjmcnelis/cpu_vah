#include <math.h>
#include <cmath>
#include <stdio.h>
#include "../include/Macros.h"
#include "../include/Precision.h"
#include "../include/EquationOfState.h"

precision energy_density_cutoff(precision e_min, precision e)
{
	precision e_cut = fmax(0., e);

	return e_cut  +  e_min * exp(- e_cut / e_min);	// regulated energy density asymptotes to e_min
													// as e -> 0 (avoids discontinuites in energy profile)
	//return fmax(e_min, e);						// hard cutoff
}


// it might be better to make an equation class to store the variables
// what would be better to use? a fit function or interpolation?

equation_of_state::equation_of_state(precision e_in)
{
	e1  = e_in;			// compute powers
	e2  = e1  * e1;
	e3  = e2  * e1;
	e4  = e3  * e1;
	e5  = e4  * e1;
	e6  = e5  * e1;
	e7  = e6  * e1;
	e8  = e7  * e1;
	e9  = e8  * e1;
	e10 = e9  * e1;
	e11 = e10 * e1;
	e12 = e11 * e1;
	e13 = e12 * e1;
	e14 = e13 * e1;
	e15 = e14 * e1;
	e16 = e15 * e1;
	e17 = e16 * e1;
	e18 = e17 * e1;
	e19 = e18 * e1;
	e20 = e19 * e1;
	e21 = e20 * e1;
	e22 = e21 * e1;
	e23 = e22 * e1;
	e24 = e23 * e1;
	e25 = e24 * e1;
	e26 = e25 * e1;
}

equation_of_state::~equation_of_state()
{

}


precision equation_of_state::equilibrium_pressure()
{
	precision p;

	// need to think about how to implement eos switching
	// for equation of state switching, should avoid macros (right this needs to be updated eventually)
#ifdef LATTICE_QCD
	p = (3.258203875251529e-11 - 7.747698746076113e-7*e1 - 0.0006981835859774962*e2 - 0.06174685910888912*e3 + 2.275922623600396*e4 - 37.44924095890363*e5 + 233.86414097675518*e6 + 19.464596980830084*e7 - 12874.726137720376*e8 + 64564.18316194397*e9 - 71526.35129303865*e10 + 33676.244329386056*e11 + 14038.245253970734*e12 - 20414.77445592913*e13 + 8726.519534553134*e14 - 81.50944485934848*e15 - 752.9942377524083*e16 + 258.28927588902246*e17 - 17.453939443529997*e18 + 11.355064193208065*e19 + 0.6357364785590592*e20 + 0.0091023656741957*e21 + 0.00003993269353049751*e22 + 4.8771388046509797e-8*e23 + 1.0405466824842022e-11*e24)/(-4.732328155036805e-6 - 0.00325496338546896*e1 - 0.2414677643015335*e2 + 8.446673595606319*e3 - 125.95148874838058*e4 + 478.4320052947472*e5 + 4620.6136514507825*e6 - 77854.87566345902*e7 + 310810.3126290067*e8 - 192579.3199639818*e9 - 159145.94873938535*e10 + 436458.4758128175*e11 - 351005.5467031545*e12 + 154372.28841797868*e13 - 31046.555167702114*e14 + 1842.3266104828965*e15 + 553.6716087575791*e16 + 65.80263807137636*e17 + 59.03967708029564*e18 + 2.5943899381998428*e19 + 0.032381183915126406*e20 + 0.00013101670868370324*e21 + 1.527281015828544e-7*e22 + 3.1747370586121694e-11*e23 + 1.0273281217533355e-17*e24);
#else
	p = e1 / 3.;
#endif
	if(p < 0)
	{
		printf("equation_of_state error: p = %lf is negative. Enforcing positive equilibrium_pressure\n", p);
		p = fmax(p, 0.);
	}
	return p;
}


precision equation_of_state::speed_of_sound_squared()
{
	precision cs2;

#ifdef LATTICE_QCD
	cs2 = (-3.098379231725401e-13 - 1.5057592378698152e-9*e1 + 1.8182477549678398e-7*e2 + 0.000265942360295654*e3 - 0.012169801366573908*e4 + 0.25838101370941824*e5 - 2.921437946175593*e6 + 16.963191123856383*e7 - 18.356276131836637*e8 - 293.3566651404204*e9 + 1095.410458138189*e10 - 874.716911001333*e11 + 3112.672324311266*e12 - 2020.806516817968*e13 + 460.99064883666415*e14 + 1220.3791075527747*e15 - 747.2397158495869*e16 + 244.50848087109242*e17 - 15.198338794559106*e18 + 7.3838001744904345*e19 + 0.35977103084379103*e20 + 0.0034073946427534752*e21 + 3.176466242678107e-6*e22)/(-2.029332754087875e-12 - 6.659314443251908e-9*e1 + 1.2786688789845978e-6*e2 + 0.0009960480360445558*e3 - 0.0408121389743489*e4 + 0.7038607492465706*e5 - 4.455539775096916*e6 - 25.243468414027458*e7 + 676.8145376717912*e8 - 4910.207748605095*e9 + 15483.360208014285*e10 - 26085.447785506487*e11 + 56744.64239156274*e12 - 57771.290373059644*e13 + 39984.54561622914*e14 - 9413.899973292644*e15 - 181.03406978253508*e16 + 868.729840087911*e17 - 25.779160873597263*e18 + 32.31113412515543*e19 + 1.2344162871494986*e20 + 0.01063222579594702*e21 + 9.683731676774376e-6*e22);
#else
	cs2 = 1./3.;
#endif
	return cs2;
}


precision equation_of_state::effective_temperature(precision conformal_prefactor)
{
	precision T;

#ifdef LATTICE_QCD				 	
	T = (1.0097526475300114e-7 + 0.00021838483878330327*e1 + 0.0527665048468103*e2 + 1.3443038870124433*e3 - 29.734024004370692*e4 + 269.2769967747579*e5 + 1866.2652129862722*e6 - 3760.609426819512*e7 - 7339.004735460014*e8 + 1606.4002928709317*e9 + 22406.963604607237*e10 - 20502.863988381978*e11 - 1681.250215337671*e12 + 31774.024065918482*e13 - 8929.575720414807*e14 + 1060.5047767092692*e15 + 1556.1430619374776*e16 + 79.24641177767323*e17 + 0.8843663758438196*e18 + 0.002262761812575013*e19 + 9.097931466167723e-7*e20)/(6.52335668683017e-7 + 0.0008874335630072429*e1 + 0.1442403491043538*e2 + 1.6787993054371462*e3 - 56.63303674664881*e4 + 699.7663335101611*e5 + 1778.0902926314081*e6 - 4084.075030043697*e7 - 17409.764307553494*e8 + 24711.788909162286*e9 - 2882.4287321466554*e10 + 2951.387363303661*e11 - 20969.597421345836*e12 + 53914.5094221402*e13 - 19175.577404922642*e14 + 4057.4347774133366*e15 + 1550.173009591607*e16 + 54.95207917670983*e17 + 0.43418792515403754*e18 + 0.00074734801321898*e19 + 1.598170725740521e-7*e20);
#else
	T = pow(e1 / conformal_prefactor, 0.25);
#endif
	return T;
}


precision equation_of_state::z_quasi(precision T)		
{
	precision z;	// mass / T

#ifdef LATTICE_QCD
	z = (-6.921627474395535e-11 - 2.068820219007291e-7*e1 - 0.00008004794094185476*e2 - 0.004170294272191056*e3 + 0.09994318330775476*e4 - 0.6028049712926495*e5 - 17.32997254829035*e6 + 221.86420008446356*e7 - 1161.528708956738*e8 - 1723.4122240576517*e9 + 339.98693004139375*e10 - 1371.3149826668873*e11 - 333.6959481389614*e12 - 321.321802085032*e13 + 131.94753133513424*e14 - 122.69087685089039*e15 + 5.370697224359077*e16 - 6.052394085388524*e17 - 0.7038207218913564*e18 - 0.01757160010668318*e19 - 0.00012991380242842205*e20 - 2.4594753226751026e-7*e21 - 7.352913098840251e-11*e22)/(-7.977262417393307e-12 - 2.786830987719674e-8*e1 - 0.000011762180354256496*e2 - 0.0006815255296076517*e3 + 0.014251257515341783*e4 - 0.0445565524634568*e5 - 3.3945388533360994*e6 + 37.08500361346862*e7 - 166.1413947461126*e8 - 471.2995122873681*e9 + 116.40828587862126*e10 - 380.4316969931931*e11 + 14.113450070587334*e12 - 186.43236298050886*e13 + 78.29603797399548*e14 - 42.553940433457285*e15 + 1.8975639224075795*e16 - 1.6361357363557714*e17 - 0.3074277311308281*e18 - 0.010250374977627853*e19 - 0.00009012790614650718*e20 - 1.9169861873399123e-7*e21 - 6.394439165661743e-11*e22);
#else
	z = 0;
#endif
	return z;
}


precision equation_of_state::mdmde_quasi()
{
	precision mdmde;

#ifdef LATTICE_QCD
	mdmde = (-1.1123631636297233e-16 + 1.4139243361369686e-14*e1 + 3.721480625854963e-11*e2 - 1.1051034554557073e-8*e3 + 4.293632053721226e-7*e4 + 0.00010102526719429564*e5 - 0.006711775629413175*e6 + 0.22211586478553663*e7 - 4.679885529595576*e8 + 68.90440687134294*e9 - 722.7034703795854*e10 + 5350.068342373652*e11 - 26821.524352996694*e12 + 85241.07873522438*e13 - 165070.78592788626*e14 + 220008.1433721365*e15 - 238821.97449171962*e16 + 192649.01193661397*e17 - 129339.10610817105*e18 + 47362.068861485284*e19 - 9098.976926100564*e20 + 345.1125470989994*e21 - 65.18059783017668*e22 + 0.5336316588688652*e23 + 0.1314236985827908*e24 + 0.0005071653091929672*e25 + 1.2622782105581163e-7*e26)/(-8.470594112097918e-20 - 3.0334858946453655e-16*e1 + 1.9221008294469902e-13*e2 + 3.2970489778770567e-12*e3 - 1.2829998132301256e-8*e4 + 1.3773757095343025e-6*e5 + 0.00002022154904931217*e6 - 0.002930770822779598*e7 + 0.10660208553788184*e8 - 2.2098135701741763*e9 + 30.171364252428436*e10 - 267.5251584133791*e11 + 1413.9660089847882*e12 - 2646.540333937091*e13 - 14290.774304779678*e14 + 87788.200508876*e15 - 167569.32061878*e16 + 240390.70234491615*e17 - 213428.71705193262*e18 + 138010.45687451633*e19 - 51209.10145588782*e20 + 11781.485918505261*e21 - 1217.3899418058113*e22 + 235.38359728669485*e23 + 12.01744346594077*e24 + 0.11795181077625658*e25 + 0.00015208597485394176*e26);
/*
	mdmde = (-1.1927967184213977e-16 - 6.93974002078785e-14*e1 + 1.9869461829302351e-10*e2 - 8.208591908642511e-8*e3 +
	2.1583246622414057e-6*e4 + 0.00295868687991236*e5 - 0.17822845705127216*e6 + 5.475450243005113*e7 -
	112.74127105299743*e8 + 1792.0308572672911*e9 - 23579.344765116297*e10 + 255189.75987280835*e11 -
	2.150714313919863e6*e12 + 1.3217785117761483e7*e13 - 5.577544865333324e7*e14 + 1.5312086360101765e8*e15 -
	2.6254487591150045e8*e16 + 2.8330538234837854e8*e17 - 2.0088099636636007e8*e18 + 8.347774051502697e7*e19 -
	2.0059418552083727e7*e20 + 2.3761027880381965e6*e21 - 177245.14183632794*e22 + 14339.985029833542*e23 -
	425.93472333750054*e24 - 2.577223524643679*e25 - 0.0008855556603909956*e26)/
	(3.0182841741089683e-21 - 6.577567640649949e-16*e1 + 4.815941355358405e-13*e2 + 9.975024228049674e-11*e3 -
	1.3894925021353866e-7*e4 + 0.000022993194037377313*e5 + 0.0012773521621841865*e6 - 0.1065579618826654*e7 +
	3.590371338387996*e8 - 80.48923667947855*e9 + 1393.5544507541963*e10 - 18894.187421954797*e11 +
	192969.21573898598*e12 - 1.408144757359425e6*e13 + 6.7921946177834235e6*e14 - 1.8712911902045455e7*e15 +
	1.804160400553675e7*e16 + 2.8706083779758964e7*e17 - 6.826894176947126e7*e18 + 6.86350446212044e7*e19 -
	3.355884995662966e7*e20 + 9.82011720923614e6*e21 - 1.659176852926879e6*e22 + 322524.77250394184*e23 -
	29476.7992154663*e24 - 486.03870527880787*e25 - 0.8934224937867911*e26);
*/
#else
	mdmde = 0;
#endif
	return mdmde;
}


precision equation_of_state::equilibrium_mean_field(precision T)
{
	precision Beq;

#ifdef LATTICE_QCD
	Beq = (-0.00014062752263119843 + 0.2379242517626019*e1 - 7.652070613493643*e2 + 103.74860438908097*e3 - 737.5821559333572*e4 + 3247.263538490574*e5 - 10515.549916941185*e6 + 11733.571827739737*e7 + 4891.077685224742*e8 - 34610.18746768503*e9 + 59089.19275974825*e10 - 51132.605796603144*e11 + 23240.95858982552*e12 - 6351.270469223261*e13 + 1243.3103601685511*e14 - 271.02350624683777*e15 + 77.28890422589751*e16 + 6.861570057022561*e17 - 0.061074992910151324*e18 - 0.0008134689379938509*e19 - 1.1256801223385317e-6*e20)/(-2.3158198765018394 + 68.74089731092687*e1 - 827.2937948361855*e2 + 4956.8913570637615*e3 - 19441.306038112383*e4 + 64613.252524115334*e5 + 18840.864260856848*e6 + 217.74430236461092*e7 - 19791.664416644526*e8 - 29180.14576093904*e9 - 39626.69721247169*e10 - 30613.476453009993*e11 + 62354.45307262448*e12 - 33917.77621528999*e13 + 9343.735868937449*e14 - 602.9029343012371*e15 + 399.2255336058777*e16 + 7.766954875118376*e17 + 0.036231945687140756*e18 + 0.00003768663903333004*e19 + 5.947311885856504e-11*e20);
#else
   Beq = 0;
#endif
   return Beq;
}


precision equation_of_state::beta_shear(precision T, precision conformal_prefactor)
{
	double beta_shear;
	double T1 = (double)T;

#ifdef LATTICE_QCD
	double T2  = T1  * T1;
	double T3  = T2  * T1;
	double T4  = T3  * T1;
	double T5  = T4  * T1;
	double T6  = T5  * T1;
	double T7  = T6  * T1;
	double T8  = T7  * T1;
	double T9  = T8  * T1;
	double T10 = T9  * T1;
	double T11 = T10 * T1;
	double T12 = T11 * T1;
	double T13 = T12 * T1;
	double T14 = T13 * T1;
	double T15 = T14 * T1;
	double T16 = T15 * T1;

	beta_shear = (0.11389523069479185 - 2.705127789711982*T + 28.742274634585783*T2 - 179.70799505135633*T3 + 730.506119388531*T4 - 2007.1240462918665*T5 +
	3721.0091345659325*T6 - 4366.923562236631*T7 + 2347.927819272824*T8 + 1559.8495170149938*T9 - 4257.643429592799*T10 +
	3938.5865394866464*T11 - 1999.1891431300426*T12 + 551.2544143662707*T13 - 64.67817053548931*T14)/
	(-8.065469391396581 + 92.36219194757648*T - 453.6119231622029*T2 + 1282.9299920278522*T3 - 2333.58921706985*T4 + 2843.5221412837436*T5 -
	2291.373282720429*T6 + 1092.688273629689*T7 - 140.80190149751965*T8 - 177.18993543735297*T9 + 126.47676060292035*T10 -
	39.29732109229348*T11 + 6.547795713678674*T12 - 0.6094551149533467*T13 + 0.023633386710670345*T14);
#else
	beta_shear = 4./15. * conformal_prefactor * T1 * T1 * T1 * T1;
#endif
	return beta_shear;
}


precision equation_of_state::beta_bulk(precision T)
{
	double beta_bulk;
	
#ifdef LATTICE_QCD
	double T1 = (double)T;
	double T2  = T1  * T1;
	double T3  = T2  * T1;
	double T4  = T3  * T1;
	double T5  = T4  * T1;
	double T6  = T5  * T1;
	double T7  = T6  * T1;
	double T8  = T7  * T1;
	double T9  = T8  * T1;
	double T10 = T9  * T1;
	double T11 = T10 * T1;
	double T12 = T11 * T1;

	beta_bulk = (-0.07227796340001295 + 1.3143764840615304*T - 10.618632711354438*T2 + 50.49226038033788*T3 - 157.4895501326704*T4 + 339.56597470170806*T5 -
	518.8479144079654*T6 + 565.401177446674*T7 - 434.90715638011426*T8 + 229.10104947248428*T9 - 77.73510380062434*T10 +
	14.99701288452569*T11 - 1.2012010330086933*T12)/
	(36.286491731381375 - 385.4575151988946*T + 1863.5710590765027*T2 - 5417.869823144005*T3 + 10538.668878148343*T4 - 14431.58178913021*T5 +
	14242.335632907661*T6 - 10182.425674573899*T7 + 5216.5453702051245*T8 - 1858.714375839709*T9 + 434.4504198478326*T10 -
	59.390426532205105*T11 + 3.581827839432567*T12);
#else
   beta_bulk = 0;
#endif
   return beta_bulk;
}


// seperate this? this is only used in initial conditions (negligible cost to be super accurate)
precision equilibrium_energy_density(precision T, precision conformal_prefactor)
{
	precision e;

#ifdef LATTICE_QCD			
	double T1 = (double)T;
	double T2 = T1 * T1;
	double T3 = T2 * T1;
	double T4 = T3 * T1;
	double T5 = T4 * T1;
	double T6 = T5 * T1;
	double T7 = T6 * T1;
	double T8 = T7 * T1;
	double T9 = T8 * T1;
	double T10 = T9 * T1;
	double T11 = T10 * T1;
	double T12 = T11 * T1;
	double T13 = T12 * T1;
	double T14 = T13 * T1;
	double T15 = T14 * T1;
	double T16 = T15 * T1;
	double T17 = T16 * T1;
	double T18 = T17 * T1;
	double T19 = T18 * T1;
	double T20 = T19 * T1;

	e = (0.40627518438643867 - 11.011572539859957*T1 + 130.77928985869593*T2 - 877.6121918925887*T3 + 3535.421433912612*T4 - 8078.914267299846*T5 + 6439.154404609683*T6 + 15129.165217897591*T7 - 38768.2682434212*T8 - 8551.62549456636*T9 + 126398.49102427797*T10 - 76579.50897685449*T11 - 311008.5908671992*T12 + 508668.90387515235*T13 + 355111.33690457407*T14 - 2.0632279590489047e6*T15 + 3.1401856418813644e6*T16 - 2.69069250116831e6*T17 + 1.421083090444586e6*T18 - 443129.7467853764*T19 + 64263.40447458266*T20)/(-59.6120292971754 + 717.1241260536837*T1 - 3645.3702819435307*T2 + 9765.42393031536*T3 - 12832.431386201157*T4 + 142.82590432252346*T5 + 25186.86259123896*T6 - 28316.004650857147*T7 - 17930.007137334782*T8 + 77200.73271762159*T9 - 80850.88417786805*T10 + 23824.933947902435*T11 + 25225.154910216275*T12 - 21367.56797902718*T13 - 7567.354921918593*T14 + 20258.528356323113*T15 - 13624.52545866848*T16 + 4563.423116419881*T17 - 761.8274089342926*T18 + 76.44496845688465*T19 - 3.4969057033074002*T20);
#else
	e = conformal_prefactor * T * T * T * T;
#endif
	return e;
}

