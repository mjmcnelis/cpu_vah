#include <math.h>
#include <cmath>
#include <stdio.h>
#include <stdlib.h>
#include "../include/Macros.h"
#include "../include/Precision.h"
#include "../include/EquationOfState.h"
#include "../include/LatticeData.h"

precision energy_density_cutoff(precision e_min, precision e)
{
	precision e_cut = fmax(0., e);

	return e_cut  +  e_min * exp(- e_cut / e_min);	// regulated energy density asymptotes to e_min
													// as e -> 0 (avoids discontinuites in energy profile)
	//return fmax(e_min, e);						// hard cutoff
}

inline precision pressure_cutoff(precision p_min, precision p)
{
	precision p_cut = fmax(0., p);

	return p_cut  +  p_min * exp(- p_cut / p_min);	// regulated energy density asymptotes to p_min
													// as pl, pt -> 0 (avoids discontinuites in pressure profile)
	//return fmax(p_min, p);						// hard cutoff
}


equation_of_state_new::equation_of_state_new(precision e1_in, precision conformal_prefactor_in)
{
	// constructor computes the temperature T

	e1 = e1_in;
	conformal_prefactor = conformal_prefactor_in;

#ifdef LATTICE_QCD
	precision hotqcd_e_min = 0.00175;		// min energy density in fm^-4 rounded up to 3 SFs (see notebook in eos/hotqcd_smash)

	if(e1 < hotqcd_e_min)
	{
		printf("equation_of_state_new error: e1 = %.3f is smaller than minimum energy density = %lf in hotqcd eos table\n", e1, hotqcd_e_min);
		exit(-1);
	}
#endif

#ifdef LATTICE_QCD
	double e2  = e1  * e1;
	double e3  = e2  * e1;
	double e4  = e3  * e1;
	double e5  = e4  * e1;
	double e6  = e5  * e1;
	double e7  = e6  * e1;
	double e8  = e7  * e1;
	double e9  = e8  * e1;
	double e10 = e9  * e1;
	double e11 = e10 * e1;
	double e12 = e11 * e1;
	double e13 = e12 * e1;
	double e14 = e13 * e1;
	double e15 = e14 * e1;
	double e16 = e15 * e1;
	double e17 = e16 * e1;
	double e18 = e17 * e1;
	double e19 = e18 * e1;
	double e20 = e19 * e1;
	double e21 = e20 * e1;
	double e22 = e21 * e1;
	double e23 = e22 * e1;
	double e24 = e23 * e1;

	T = (-1.284849499906484e-7 - 0.00033905992867459107*e1 - 0.11286917244599257*e2 - 6.772316804565534*e3 + 5.918553143926473*e4 + 2450.0590609522387*e5 + 11232.61482219216*e6 - 272.5900946318365*e7 - 2076.1074725446338*e8 + 2831.870323050683*e9 - 3566.50424030447*e10 + 2237.715740293385*e11 - 746.6533949917829*e12 + 141.4623009968651*e13 - 12.73670808833451*e14 - 0.35501214081891347*e15 + 0.2063767789683454*e16 - 0.017473568357989862*e17 + 0.0002705739660966409*e18 + 0.00001962366127129764*e19 + 1.3660065463777762e-7*e20 + 2.4294938875063053e-10*e21 + 1.2063558856694864e-13*e22 + 1.5050610153375508e-17*e23 + 3.0798405164547913e-22*e24)/(-8.400524907855908e-7 - 0.001430906013482763*e1 - 0.33842896614088974*e2 - 13.92654621834692*e3 + 98.4514439430593*e4 + 4631.5541632291715*e5 + 15401.948683961415*e6 - 3633.0051398439396*e7 + 186.48516571567083*e8 + 1405.8843370860877*e9 - 3325.717505962642*e10 + 2512.200672226691*e11 - 950.3160196142197*e12 + 210.71173964836763*e13 - 26.898590530774765*e14 + 1.4407651595260662*e15 + 0.07667819731853033*e16 - 0.013969577052941573*e17 + 0.0003994840154556154*e18 + 0.000012380009020398972*e19 + 6.080190427415619e-8*e20 + 7.937480602044656e-11*e21 + 2.85812750074418e-14*e22 + 2.4270396117905006e-18*e23 + 2.653516195297141e-23*e24);
#else
	T = pow(e1 / conformal_prefactor, 0.25);
#endif

	T1 = T;
	T2 = T1 * T1;
	T3 = T2 * T1;
	T4 = T3 * T1;
	T5 = T4 * T1;
	T6 = T5 * T1;
	T7 = T6 * T1;
	T8 = T7 * T1;
	T9 = T8 * T1;
	T10 = T9 * T1;
	T11 = T10 * T1;
	T12 = T11 * T1;
	T13 = T12 * T1;
	T14 = T13 * T1;
	T15 = T14 * T1;
	T16 = T15 * T1;
	T17 = T16 * T1;
	T18 = T17 * T1;
	T19 = T18 * T1;
	T20 = T19 * T1;
	T21 = T20 * T1;
	T22 = T21 * T1;
}


equation_of_state_new::~equation_of_state_new()
{

}


precision equation_of_state_new::equilibrium_pressure()
{
	precision p;

#ifdef LATTICE_QCD
	p = (-1.0566698570987612 + 23.916085862701294*T1 - 238.11582696980312*T2 + 1361.9883808067277*T3 - 4864.715239587276*T4 + 10862.013305584635*T5 - 13709.558125504494*T6 + 5551.287099612893*T7 + 4783.8738740723165*T8 + 12147.354099969676*T9 - 60674.40387532449*T10 + 85038.60462276456*T11 - 35135.52332414388*T12 - 49265.768149932555*T13 + 87226.19660333099*T14 - 63978.70025744544*T15 + 26202.426371951802*T16 - 5928.908435845565*T17 + 599.1152716833342*T18)/(-4.053627721342021 - 295.23013887735914*T1 + 2474.735329204468*T2 - 8412.575015761078*T3 + 14739.35508801423*T4 - 11428.20882017763*T5 - 5215.198695073143*T6 + 21485.192833556837*T7 - 20788.159732758526*T8 + 5977.415387153139*T9 + 6035.884330876398*T10 - 7293.79625515998*T11 + 3447.0095158150752*T12 - 786.0276841971851*T13 + 56.46915384756496*T14 + 7.860152612683704*T15 - 0.6902063511812704*T16 + 0.03668887199915598*T17 - 0.0008914470177124864*T18);
#else
	p = e1 / 3.;
#endif

	if(p < 0)
	{
	#ifdef FLAGS
		printf("equation_of_state_new::equilibrium_pressure flag: (p, e, T) = (%lf, %lf, %lf) is negative. Using linear interpolation...\n", p, e1, T1);
	#endif

		int iT = (int)floor((T1 - lattice_temperature[0]) / dT);

		if(iT >= 0 && iT < lattice_points - 1)
		{
			precision TL = lattice_temperature[iT];
			precision TR = lattice_temperature[iT + 1];

			precision pL = lattice_pressure[iT];
			precision pR = lattice_pressure[iT + 1];

			p = (pL * (TR - T)  +  pR * (T - TL)) / (TR - TL);

			//printf("Using linear interpolation: (TL, T, TR) = (%lf, %lf, %lf) \t (pL, p, pR) = (%lf, %lf, %lf)\n", TL, T1, TR, pL, p, pR);
		}
		else
		{
		#ifdef FLAGS
			printf("equation_of_state_new::equilibrium_pressure flag: temperature outside linear interpolation table (iT = %d). Setting p = 0.0005\n", iT);
		#endif
			p = pressure_cutoff(5.e-4, p);
		}
		//p = fmax(p, 0.);
		//p = pressure_cutoff(5.e-4, p);
	}
	return p;
}


precision equation_of_state_new::speed_of_sound_squared()
{
	precision cs2;

#ifdef LATTICE_QCD
	cs2 = (-0.3105928951368519 + 10.94925898933737*T1 - 99.34890342408488*T2 + 450.48794642162056*T3 - 1201.850022433103*T4 + 1899.6343253418752*T5 - 1368.0624958041885*T6 - 840.2969028203515*T7 + 2734.358727493692*T8 - 1507.5264102946828*T9 - 2167.2941632549573*T10 + 3870.7188040799124*T11 - 1152.037746486661*T12 - 3069.6172327822765*T13 + 4689.464592105389*T14 - 3346.398410588096*T15 + 1387.4805391552727*T16 - 323.4529854776117*T17 + 33.101672727369376*T18)/(2.156734581129359 - 4.368861134574549*T1 - 103.93284424409116*T2 + 821.3511296998269*T3 - 2986.620043457751*T4 + 6359.100294239972*T5 - 7835.080204033482*T6 + 3668.4398117585165*T7 + 4151.06386890613*T8 - 7637.141778390235*T9 + 3718.4985502052155*T10 - 350.9604005680102*T11 + 4997.963752112262*T12 - 13009.49461479676*T13 + 15064.489505560106*T14 - 10131.702658907418*T15 + 4143.062180114246*T16 - 966.3028511710239*T17 + 99.47842977605012*T18);
#else
	cs2 = 1./3.;
#endif

	return cs2;
}


precision equation_of_state_new::z_quasi()
{
	precision z;

#ifdef LATTICE_QCD
	z = (0.5953313988318101 - 2.2043653777008614*T1 + 6.412298975786382*T2 - 55.999935626852256*T3 + 266.60638354021063*T4 - 613.7443665674955*T5 + 655.4361962409046*T6 - 15.985620813188662*T7 - 722.964445473731*T8 + 559.5675143434362*T9 + 331.3111327115995*T10 - 744.1136744233224*T11 + 232.70107465490355*T12 + 485.8050268195538*T13 - 772.6165293970012*T14 + 655.2619938242386*T15 - 392.69621238742855*T16 + 159.90084483026934*T17 - 34.580773905851075*T18 + 0.3552068133864607*T19 + 0.9529211080685058*T20)/(1.1621492604568943e-6 + 0.8316553006125841*T1 - 6.145185278692966*T2 + 18.593245529858304*T3 - 29.383537074661632*T4 + 29.562837167596356*T5 - 38.44431456235*T6 + 73.50473831542084*T7 - 91.7352784806228*T8 + 47.099875767546756*T9 + 17.377610722099814*T10 - 38.314006662117855*T11 + 19.446036400472437*T12 + 24.055731836948876*T13 - 80.16900358183341*T14 + 90.87090243010566*T15 - 30.23093829725649*T16 - 31.73728103092395*T17 + 38.419610895809136*T18 - 16.148353279684848*T19 + 2.5456531976175*T20);

	if(z <= 0)
	{
	#ifdef FLAGS
		printf("equation_of_state_new::z_quasi flag: z = %lf is not positive\n", z);
	#endif
	}
#else
	z = 0;
#endif

	return z;
}


precision equation_of_state_new::mdmde_quasi()
{
	precision mdmde;

#ifdef LATTICE_QCD
	mdmde = (-0.9044577175286141 + 14.167521872685281*T1 - 97.04225354466944*T2 + 379.4597217565205*T3 - 900.3209090326826*T4 + 1182.907740583381*T5 - 292.9927796294081*T6 - 1694.796151320362*T7 + 2515.7395668852787*T8 - 269.4439553208389*T9 - 2615.0680861748133*T10 + 1753.8837277449838*T11 + 2068.362833646259*T12 - 3160.189636326953*T13 - 614.6549859445965*T14 + 5003.404265316241*T15 - 5898.682150478368*T16 + 3891.4384140025722*T17 - 1655.876136252587*T18 + 467.17860742479394*T19 - 85.32317349187821*T20 + 9.179819780224276*T21 - 0.427543790040597*T22)/(-0.005660039193684175 + 0.20900113761492586*T1 - 3.4462146872130908*T2 + 33.724067246929145*T3 - 220.81898153481225*T4 + 1028.9234155258046*T5 - 3511.8018073561916*T6 + 8812.592884185244*T7 - 15829.13121493591*T8 + 18522.711848860694*T9 - 9123.181936169023*T10 - 9711.60251280201*T11 + 18291.146654279633*T12 + 342.6773447095763*T13 - 29815.463006057253*T14 + 29574.63231147379*T15 + 12838.754229704398*T16 - 59953.87317974502*T17 + 70796.78679511437*T18 - 47389.16115139687*T19 + 19410.511528752577*T20 - 4572.855426042853*T21 + 478.67101000971604*T22);
#else
	mdmde = 0;
#endif

	return mdmde;
}


precision equation_of_state_new::equilibrium_mean_field()
{
	precision Beq;

#ifdef LATTICE_QCD
	Beq = (119.79349874777762 - 1328.3990427047916*T1 + 5396.686416536681*T2 - 8635.132935745569*T3 - 521.874699877953*T4 + 14796.021072398586*T5 - 4286.354130148595*T6 - 15463.15031608741*T7 + 1454.1300753069117*T8 + 13292.686472493779*T9 + 4530.979015189796*T10 - 7559.6609646628285*T11 - 7433.641506076467*T12 + 834.365469267021*T13 + 5603.558525502276*T14 + 2806.1600385712027*T15 - 2431.9462205647587*T16 - 3050.361861708451*T17 + 1244.7586325969125*T18 + 2042.5940636457426*T19 - 2297.559637199446*T20 + 1106.5775343257262*T21 - 218.98822312269746*T22)/(1759.7231493305837 - 3471.5168250129227*T1 - 224.5446521302337*T2 + 1788.688694931137*T3 + 1535.5920555193522*T4 + 243.55403774292395*T5 - 839.5050284459006*T6 - 1113.6914365157*T7 - 648.4823655648457*T8 + 77.12935587670238*T9 + 540.1202903145097*T10 + 503.0494673533163*T11 + 125.03680110446948*T12 - 89.50040976236154*T13 - 70.41860942761154*T14 - 12.774060100826517*T15 - 31.879199839340078*T16 - 79.3875507730442*T17 - 49.51480211610831*T18 + 38.23047666275624*T19 + 28.235330859055665*T20 - 3.706480007237153*T21 + 0.16218100463919985*T22);
#else
	Beq = 0;
#endif

	return Beq;
}


precision equation_of_state_new::beta_shear()
{
	precision beta_shear;

#ifdef LATTICE_QCD
	beta_shear = (-27.142377054641432 + 462.7152568336012*T1 - 3088.911493836734*T2 + 9294.165656439045*T3 - 5546.362522785967*T4 - 43310.703454899645*T5 + 122769.7671032288*T6 - 103467.21649054765*T7 - 54811.25840471966*T8 + 112983.19635536015*T9 + 33003.2645574495*T10 - 86513.1184180193*T11 - 31137.48855008747*T12 + 50820.04595819615*T13 + 21301.57924579058*T14 - 25062.560360078023*T15 - 3501.9015715618584*T16 + 18229.12958093956*T17 - 16217.694005589445*T18 - 3457.235338268151*T19 + 12393.178531714608*T20 - 6597.871611845416*T21 + 1470.5575446982516*T22)/(1015.5789835794669 - 7321.710661943294*T1 + 16400.56439744739*T2 - 11859.495858498654*T3 - 4578.450202173476*T4 + 6669.392709012055*T5 + 4352.0336723167575*T6 - 2746.3644144823443*T7 - 4767.192568645696*T8 - 975.4366636513871*T9 + 3400.4703589080195*T10 + 3500.6952093601494*T11 - 463.088334916719*T12 - 3332.053030372763*T13 - 1131.0706154419624*T14 + 2028.5128862558045*T15 - 27.60401477286506*T16 - 234.79138256755024*T17 + 3.310604161225659*T18 + 65.90446768041976*T19 - 7.579889386648616*T20 + 0.5007173440741145*T21 - 0.014536235575445516*T22);
#else
	beta_shear = 4./15. * conformal_prefactor * T4;
#endif

	return beta_shear;
}


precision equation_of_state_new::beta_bulk()
{
	precision beta_bulk;

#ifdef LATTICE_QCD
	beta_bulk = (-0.007759718657876827 + 0.13527701183460097*T1 - 1.007325721445928*T2 + 4.094006434717201*T3 - 9.08657965249736*T4 + 6.256305009441373*T5 + 24.00870073056565*T6 - 82.77151389599645*T7 + 114.99885289024945*T8 - 41.30662650662664*T9 - 123.40789469814824*T10 + 218.9629399579876*T11 - 107.35118678049548*T12 - 110.3502510719402*T13 + 177.84317606715905*T14 - 14.291071345426523*T15 - 189.09921836490983*T16 + 240.92678202232733*T17 - 158.11181677331444*T18 + 62.4799308503998*T19 - 14.596624269558063*T20 + 1.7479763171335152*T21 - 0.06607848782788789*T22)/(14.2447584800057 - 143.0380383405217*T1 + 614.8883332122975*T2 - 1425.7281326691227*T3 + 1753.3236957895263*T4 - 619.9402701118898*T5 - 1166.5869323039597*T6 + 1355.0856774027493*T7 + 234.5120173060178*T8 - 1000.5813430192038*T9 - 164.88968228295698*T10 + 1084.016783336133*T11 - 163.14576407262282*T12 - 1280.9908387234796*T13 + 1608.0736134282931*T14 - 997.9363437538555*T15 + 383.5274234695*T16 - 107.08189506761974*T17 + 28.683056883497215*T18 - 7.769351756848533*T19 + 1.4593392411101056*T20 - 0.1306427916323396*T21 + 0.004536368033247522*T22);
#else
	beta_bulk = 0;
#endif

   return beta_bulk;
}



// This is the HOTQCD + SMASH version
precision equilibrium_energy_density_new(precision T, precision conformal_prefactor)
{
	precision e;

#ifdef LATTICE_QCD
#ifndef CONFORMAL_EOS
	double T1 = T;
	double T2 = T1 * T1;
	double T3 = T2 * T1;
	double T4 = T3 * T1;
	double T5 = T4 * T1;
	double T6 = T5 * T1;
	double T7 = T6 * T1;
	double T8 = T7 * T1;
	double T9 = T8 * T1;
	double T10 = T9 * T1;
	double T11 = T10 * T1;
	double T12 = T11 * T1;
	double T13 = T12 * T1;
	double T14 = T13 * T1;
	double T15 = T14 * T1;
	double T16 = T15 * T1;
	double T17 = T16 * T1;
	double T18 = T17 * T1;

	e = (-0.40698677369016695 + 26.90263255626566*T1 - 451.40931096731606*T2 + 3748.50059581573*T3 - 18498.9525114122*T4 + 57417.46806755477*T5 - 109624.23666681767*T6 + 105527.65145392402*T7 + 24561.692186035198*T8 - 187413.3245788481*T9 + 143250.8494521164*T10 + 143393.6299794811*T11 - 337897.5513221823*T12 + 177408.70085616288*T13 + 137332.23093322886*T14 - 264268.15252307296*T15 + 175507.67395950254*T16 - 58067.60179151776*T17 + 8046.346263452795*T18)/(-173.8835104731062 + 1529.128399904588*T1 - 5768.283494742235*T2 + 11835.156422023792*T3 - 13416.39237101848*T4 + 6707.496209857805*T5 + 437.7325829205757*T6 + 704.6255257249378*T7 - 2851.15588379858*T8 - 5693.046198149581*T9 + 18686.5840958459*T10 - 21262.903672709494*T11 + 12920.1164479426*T12 - 4290.49508258817*T13 + 652.3067905178337*T14 - 18.705607055329114*T15 + 1.824854560118584*T16 - 0.10710494603163746*T17 + 0.002855313723557289*T18);
#endif
#endif

#ifdef CONFORMAL_EOS
#ifndef LATTICE_QCD
	e = conformal_prefactor * T * T * T * T;
#endif
#endif

#ifdef CONFORMAL_EOS
#ifdef LATTICE_QCD
	printf("equilibrium_energy_density error: not eos switch yet\n");
	exit(-1);
#endif
#endif

	return e;
}

