#include <math.h>
#include <cmath>
#include "../include/Macros.h"
#include "../include/Precision.h"
#include "../include/EquationOfState.h"

precision energy_density_cutoff(precision e_min, precision e)
{
	precision e_cut = fmax(0., e);

	return e_cut  +  e_min * exp(- e_cut / e_min);	// regulated energy density asymptotes to e_min
													// as e -> 0 (avoids discontinuites in energy profile)
	//return fmax(e_min, e);						// hard cutoff
}


// it might be better to make an equation class to store the variables
// what would be better to use? a fit function or interpolation?

equation_of_state::equation_of_state(precision e_in)
{
	e1  = e_in;			// compute powers
	e2  = e1  * e1;
	e3  = e2  * e1;
	e4  = e3  * e1;
	e5  = e4  * e1;
	e6  = e5  * e1;
	e7  = e6  * e1;
	e8  = e7  * e1;
	e9  = e8  * e1;
	e10 = e9  * e1;
	e11 = e10 * e1;
	e12 = e11 * e1;
	e13 = e12 * e1;
	e14 = e13 * e1;
	e15 = e14 * e1;
	e16 = e15 * e1;
	e17 = e16 * e1;
	e18 = e17 * e1;
	e19 = e18 * e1;
	e20 = e19 * e1;
	e21 = e20 * e1;
	e22 = e21 * e1;
	e23 = e22 * e1;
	e24 = e23 * e1;
}

equation_of_state::~equation_of_state()
{

}


precision equation_of_state::equilibrium_pressure()
{
	double p;

	// for equation of state switching, should avoid macros
#ifdef LATTICE_QCD
#ifdef BEST 				 	// BEST equation of state
	p = (7.190009839568977e-11 - 1.395774723345131e-6*e1 - 0.0007294542973192687*e2 - 0.02755303080259852*e3 +
	0.6777139269471448*e4 - 2.5676157307802105*e5 - 198.27861304635795*e6 + 2892.771435243516*e7 -
	20443.08028356625*e8 + 26431.269835104275*e9 + 54554.71732475857*e10 - 136384.84011985105*e11 +
	170729.28261000666*e12 - 109354.23042660154*e13 + 47809.54395258853*e14 - 10743.012809422258*e15 +
	1573.4464820882827*e16 + 73.09843404933184*e17 + 33.75839022332086*e18 + 22.370532570822895*e19 +
	0.8661540343959165*e20 + 0.00823546974656238*e21 + 0.000011977402417543487*e22 -
	3.823554294234436e-8*e23 - 4.015185097090365e-11*e24)/
	(-7.4539090540790035e-6 - 0.003091276650747094*e1 - 0.10715341272046117*e2 + 2.2410756562049117*e3 +
	3.147397633194132*e4 - 977.4165681862902*e5 + 12218.017097992242*e6 - 74668.39069402599*e7 -
	8194.662719386062*e8 + 604927.8696703409*e9 - 1.1027507974839194e6*e10 + 1.2140822058208985e6*e11 -
	738923.1898118919*e12 + 316237.5914113029*e13 - 71392.6962417791*e14 + 11335.190090043036*e15 -
	109.3640028588883*e16 + 449.6151741523075*e17 + 106.96820874330709*e18 + 3.348031043873812*e19 +
	0.027585414077599367*e20 + 0.0000337469979928549*e21 - 1.252632993005512e-7*e22 -
	1.2345479534532178e-10*e23 + 1.2680975061416364e-16*e24);

#else							// Wuppertal-Budapest equation of state
	p = (5.075564888183663e-8 - 0.0000562169058017086*e1 - 0.22264079778393814*e2 - 96.54111777097086*e3 -
     1756.4940900442318*e4 - 3839.550980182813*e5 + 43314.75256472724*e6 + 21484.684622349*e7 -
     130046.39756226703*e8 + 31055.12603591556*e9 + 39710.876799090234*e10 - 1699.2739439957898*e11 +
     457.07148223707463*e12 - 2.6124197272811243*e13 - 10.644483495536646*e14 + 0.9338976604508398*e15 -
     0.08154575247701629*e16 + 0.007945758495188623*e17 - 0.00032112712608626663*e18 +
     1.3849387546528496e-6*e19 + 1.0319807626964377e-7*e20 + 2.4411168029716984e-10*e21 -
     5.320369073003463e-14*e22)/
   (-0.00014387478025277176 - 1.1792584683886174*e1 - 389.6323718241302*e2 - 6977.840105310985*e3 -
     30423.03772874304*e4 + 172511.16609332536*e5 + 395148.28097748733*e6 - 927429.602347526*e7 -
     1969.7658108555734*e8 + 442307.7633162228*e9 - 61081.643776514844*e10 + 10031.861047012935*e11 -
     1004.1267102196177*e12 + 34.34877412677497*e13 - 1.1282071952740738*e14 - 0.03273759822023652*e15 +
     0.020818561379492638*e16 - 0.0011806678144587483*e17 + 9.452128098430316e-6*e18 +
     3.5138214637099674e-7*e19 + 7.566271511306246e-10*e20 - 1.7260152864418335e-13*e21 +
     2.3271917596080208e-18*e22);
#endif

#else
	p = e1 / 3.;
#endif
	return p;
}


precision equation_of_state::speed_of_sound_squared()
{
	double cs2;

#ifdef LATTICE_QCD
#ifdef BEST 				 	// BEST equation of state
	cs2 = (-8.313077825923736e-14 - 9.91131461236627e-11*e1 + 4.9370463998042573e-8*e2 + 0.000012403698595004402*e3 -
	0.0006912983927137311*e4 + 0.021581851285318674*e5 - 0.3403540349639598*e6 + 2.571364021486668*e7 +
	6.673093766060017*e8 - 243.3375964116734*e9 + 1814.6643869387997*e10 - 2548.2582086974326*e11 +
	2765.630246068556*e12 - 1875.00259667093*e13 + 1108.2896957487499*e14 - 404.3458694331876*e15 +
	102.97057964895681*e16 - 8.666160558180495*e17 + 1.7034256926427882*e18 + 0.1509835583259864*e19 +
	0.0022131911506897946*e20 - 2.1845675724304455e-6*e21 - 4.963727093415996e-9*e22)/
	(-4.616396862584361e-13 - 3.6987626554837435e-10*e1 + 2.2199967297197156e-7*e2 + 0.00004628916421708627*e3 -
	0.002304008118798134*e4 + 0.06298983609139512*e5 - 0.6406277787382678*e6 - 3.5167650188178268*e7 +
	192.24184427400343*e8 - 2117.4295381872043*e9 + 11548.342629589715*e10 - 13151.384905721165*e11 +
	11212.491449000934*e12 - 4742.373401294556*e13 + 3067.8255158942507*e14 - 1331.2232187171192*e15 +
	433.2239004538602*e16 - 32.73752014120429*e17 + 8.258268788269858*e18 + 0.5504745185457142*e19 +
	0.006760130196823705*e20 - 7.032724563397889e-6*e21 - 1.513558086157459e-8*e22);

#else							// Wuppertal-Budapest equation of state
	cs2 = (-2.178802623232077e-8 - 0.000028058668053969316*e1 + 0.0707167841389791*e2 + 30.072115831801668*e3 +
	2235.4049904745293*e4 + 41418.70672195756*e5 + 358508.8110784304*e6 + 1.1590875075390663e6*e7 +
	954248.3211844995*e8 - 50721.294467359*e9 + 16465.82334234105*e10 - 908.4548567500927*e11 -
	252.7359144972058*e12 + 53.91419969140143*e13 - 12.026262562371759*e14 + 1.6556097635897582*e15 -
	0.11488691302515308*e16 + 0.003829345418196134*e17 - 0.000041174256263276295*e18 -
	6.534667798749817e-7*e19 + 1.251380387174281e-8*e20 + 4.584558932434191e-11*e21 +
	1.7120085646159452e-14*e22)/
	(-1.2153701643802135e-7 - 0.00008294478323975135*e1 + 0.3175076406677123*e2 + 120.51666836485872*e3 +
	8774.085137082211*e4 + 182446.2005223917*e5 + 1.995089196043474e6*e6 + 9.161741300187482e6*e7 +
	8.731822712749625e6*e8 - 2.156494891121747e6*e9 + 482885.5410394763*e10 - 69411.77018853552*e11 +
	6760.932013473378*e12 - 510.63270233261545*e13 + 8.175727094657239*e14 + 3.248437668454592*e15 -
	0.32487966107613314*e16 + 0.012482882608729243*e17 - 0.00015856500475657135*e18 -
	1.7681600567702772e-6*e19 + 4.075596322495956e-8*e20 + 1.4197025154850574e-10*e21 +
	5.1982187467659597e-14*e22);
#endif

#else
	cs2 = 1./3.;
#endif
	return cs2;
}


precision equation_of_state::effective_temperature(precision conformal_prefactor)
{
	double T;

#ifdef LATTICE_QCD
#ifdef BEST 				 	// BEST equation of state
	T = (6.354702650133721e-7 + 0.0016261450306068567*e1 + 0.45825931456340785*e2 + 14.188693412528751*e3 -
	314.7885041652167*e4 + 2378.640132157695*e5 + 25273.133749493598*e6 - 140224.9709264792*e7 +
	106293.04579291707*e8 + 89517.1975351415*e9 - 70843.79668025293*e10 + 28526.039709340683*e11 -
	36943.18834114948*e12 + 189251.03702063803*e13 - 51967.87699872343*e14 + 7691.785198380105*e15 +
	9513.282503693723*e16 + 482.55672261331955*e17 + 5.389198283394992*e18 + 0.013817918026243032*e19 +
	5.570450207372526e-6*e20)/
	(4.1560932681286e-6 + 0.006747031242574442*e1 + 1.285101644232421*e2 + 19.36905363832382*e3 - 639.5077730169339*e4 +
	7119.547834859753*e5 + 22354.06915581833*e6 - 197845.8735584382*e7 + 189101.14796407992*e8 +
	117736.90044970746*e9 - 193723.6698826523*e10 + 186595.1710000764*e11 - 158312.42292489434*e12 +
	320049.3255747058*e13 - 111686.06861346996*e14 + 25750.640860019877*e15 + 9437.496426864122*e16 +
	334.06415213565924*e17 + 2.6440125443979445*e18 + 0.004563233640606438*e19 + 9.788656932810127e-7*e20);

#else							// Wuppertal-Budapest equation of state
	T = (2.805869997121848e-7 + 0.0016687441079320283*e1 + 1.4839310262134133*e2 + 328.65797655737566*e3 +
	20588.110903563724*e4 + 333446.5800069805*e5 + 697363.6527955428*e6 - 1.726106947423048e6*e7 -
	1.4534822597460109e6*e8 + 1.6041416532072239e6*e9 + 647591.4839233705*e10 + 196069.7894032533*e11 -
	16477.03273134262*e12 + 2239.163501912496*e13 - 139.4471798412599*e14 - 56.177945728815814*e15 +
	6.286896403438542*e16 - 0.12504404549704667*e17 - 0.005436655511967141*e18 + 0.00012779108537184535*e19 +
	1.6538755980411776e-6*e20 + 3.4758922647083855e-9*e21 + 1.1123123823913987e-12*e22)/
	(2.068456663176566e-6 + 0.008270169005048402*e1 + 5.525127318169887*e2 + 946.7751657179253*e3 +
	45753.72453554468*e4 + 551625.3416059491*e5 + 797512.3880244014*e6 - 2.73675388935463e6*e7 -
	1.4424551842244035e6*e8 + 2.257817112071547e6*e9 + 747469.0482756988*e10 + 222730.76660418292*e11 -
	30716.511863420095*e12 + 4901.037822665323*e13 - 575.9147472089788*e14 - 14.771489098529415*e15 +
	4.999666623329036*e16 - 0.17506789169898215*e17 - 0.0018686576242234758*e18 + 0.00009965134321146708*e19 +
	7.777887562653655e-7*e20 + 1.0812709087693346e-9*e21 + 1.8461582296389239e-13*e22);
#endif

#else
	T = pow(e1 / conformal_prefactor, 0.25);
#endif
	return T;
}


// this is only used in initial conditions (negligible cost to be super accurate)
precision equilibriumEnergyDensity(precision T, precision conformal_prefactor)
{
	double e;

#ifdef LATTICE_QCD			// energy density from BEST collaboration
#ifdef BEST

	double T1 = (double)T;
	double T2 = T1 * T1;
	double T3 = T2 * T1;
	double T4 = T3 * T1;
	double T5 = T4 * T1;
	double T6 = T5 * T1;
	double T7 = T6 * T1;
	double T8 = T7 * T1;
	double T9 = T8 * T1;
	double T10 = T9 * T1;
	double T11 = T10 * T1;
	double T12 = T11 * T1;
	double T13 = T12 * T1;
	double T14 = T13 * T1;
	double T15 = T14 * T1;
	double T16 = T15 * T1;
	double T17 = T16 * T1;
	double T18 = T17 * T1;
	double T19 = T18 * T1;
	double T20 = T19 * T1;

	e = (-0.002999930312462119 + 0.09417646213801027*T - 1.3472144415370244*T2 + 11.531744338662536*T3 - 65.17050664643754*T4 +
	252.96623410554895*T5 - 673.9895236411604*T6 + 1155.6029102124326*T7 - 910.3488025995453*T8 -
	971.3230107937379*T9 + 3724.9276204901016*T10 - 4118.540210991578*T11 - 78.52429756414836*T12 +
	5293.81004825622*T13 - 4557.553823074766*T14 - 3240.888013850884*T15 + 10697.194999962052*T16 -
	11211.426603636184*T17 + 6481.455655216752*T18 - 2082.163818010678*T19 + 293.70151601812523*T20)/
	(0.607428913591128 - 9.953288454061427*T + 73.64572871160192*T2 - 322.3694142746391*T3 + 912.7288538270155*T4 -
	1687.858513517085*T5 + 1840.856145562391*T6 - 470.3775809532542*T7 - 1924.6292185965883*T8 +
	3047.9613287381467*T9 - 1074.1083334677714*T10 - 2852.0884246377973*T11 + 5597.783660696195*T12 -
	5456.527953543836*T13 + 3464.3092713525684*T14 - 1521.9174635327095*T15 + 471.31297621425625*T16 -
	104.13673393295115*T17 + 16.227425444403956*T18 - 1.5313653054600316*T19 + 0.0661997114240791*T20);

 #else 						// energy density from the Wuppertal-Budapest collaboration
	double T1 = (double)T;
	double T2 = T1 * T1;
	double T3 = T2 * T1;
	double T4 = T3 * T1;
	double T5 = T4 * T1;
	double T6 = T5 * T1;
	double T7 = T6 * T1;
	double T8 = T7 * T1;
	double T9 = T8 * T1;
	double T10 = T9 * T1;
	double T11 = T10 * T1;
	double T12 = T11 * T1;
	double T13 = T12 * T1;
	double T14 = T13 * T1;
	double T15 = T14 * T1;
	double T16 = T15 * T1;
	double T17 = T16 * T1;
	double T18 = T17 * T1;
	double T19 = T18 * T1;
	double T20 = T19 * T1;
	double T21 = T20 * T1;
	double T22 = T21 * T1;
	double T23 = T22 * T1;

	e = (-0.6746595680417311 + 15.18004717055557*T - 150.28838666045098*T2 + 856.8728238453558*T3 - 3067.006874419056*T4 +
	6887.691793468362*T5 - 8689.01204393483*T6 + 2779.5133034548844*T7 + 7527.143247800599*T8 -
	7280.007098663352*T9 - 5948.659144649617*T10 + 9517.34072428892*T11 + 5432.293784982603*T12 -
	11518.267479577982*T13 - 3662.4391070118304*T14 + 11510.3287888067*T15 + 2190.1375458702637*T16 -
	14631.511315975464*T17 + 11753.561347532514*T18 - 4063.357489150804*T19 + 541.1883866332131*T20)/
	(-25.236559574714622 + 171.3985969608387*T - 470.68935437785206*T2 + 609.039379929916*T3 - 254.62577340009915*T4 -
	161.54720638956582*T5 + 41.634863182950326*T6 + 95.77801093178024*T7 + 271.26565801570024*T8 -
	228.11450258806724*T9 - 549.2377700940492*T10 + 558.3772963304361*T11 + 620.0220147386352*T12 -
	1369.1552177484705*T13 + 960.5451160750602*T14 - 299.88416268160154*T15 + 24.60448576154993*T16 +
	7.327185654554338*T17 - 1.6962229435786575*T18 + 0.20830329719464258*T19 - 0.01095197778233111*T20);
#endif

#else
	e = conformal_prefactor * T * T * T * T;
#endif
	return e;
}

